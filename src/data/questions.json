{
  "Variables and Memory": {
    "flashcards": [
      {
        "question": "What is the thread of execution?",
        "answer": "• It's the process of running code line by line\n• Saves and uses data like strings and arrays in memory during execution"
      },
      {
        "question": "What is memory in a program?",
        "answer": "• A place where data is stored so it can be accessed later"
      },
      {
        "question": "What is an execution context?",
        "answer": "• The environment created when a function is called\n• Has two parts:\n  1. Thread of execution\n  2. Memory\n• Each function call gets its own execution context\n• Data inside the function's memory can't be accessed outside"
      },
      {
        "question": "What does return do in a function?",
        "answer": "• Looks up a value in local memory\n• Sends it back to where the function was called"
      },
      {
        "question": "What is the call stack?",
        "answer": "• Tracks which function is currently running\n• The top of the stack is the current function\n• When a function finishes (return), it is removed from the stack"
      },
      {
        "question": "What is it called when we make a function reusable by using inputs?",
        "answer": "• Generalising the function\n• Example: using parameters instead of hardcoded values"
      },
      {
        "question": "What's the difference between a parameter and an argument?",
        "answer": "• A parameter is a placeholder defined in the function declaration.\n• An argument is the actual value passed into the function when it's called.\n\nExample:\n\nfunction greet(name) {   // 'name' is the parameter\n  console.log(\"Hi \" + name);\n}\n\ngreet(\"Reece\");          // 'Reece' is the argument"
      },
      {
        "question": "What are these called: ()?",
        "answer": "Parentheses"
      }
    ],
    "multipleChoice": [
      {
        "question": "What is the thread of execution?",
        "options": ["The process of executing code line by line", "The structure used to store data", "A way to loop through functions", "The memory area where variables are stored"],
        "correctAnswer": "The process of executing code line by line"
      },
      {
        "question": "Where is data stored during code execution?",
        "options": ["The execution context", "The thread of execution", "Memory", "The call stack"],
        "correctAnswer": "Memory"
      },
      {
        "question": "What does an execution context contain?",
        "options": ["Just a memory space", "A thread of execution and memory", "Only the variables defined in the main scope", "A list of all functions in the code"],
        "correctAnswer": "A thread of execution and memory"
      },
      {
        "question": "What happens when a function is called?",
        "options": ["It is pushed to the memory stack", "A new execution context is created", "The entire program restarts", "It replaces the current thread of execution"],
        "correctAnswer": "A new execution context is created"
      },
      {
        "question": "What does the return keyword do?",
        "options": ["Pushes the result into the call stack", "Stores the result in memory permanently", "Sends a value from the function back to the caller", "Stops the execution of the whole program"],
        "correctAnswer": "Sends a value from the function back to the caller"
      },
      {
        "question": "What is the purpose of the call stack?",
        "options": ["To store variables and constants", "To track what function is currently running", "To hold the values returned from functions", "To assign memory to new variables"],
        "correctAnswer": "To track what function is currently running"
      },
      {
        "question": "What is generalising a function?",
        "options": ["Creating a function that runs automatically", "Using return instead of console.log", "Making the function reusable by using parameters", "Declaring the function globally"],
        "correctAnswer": "Making the function reusable by using parameters"
      },
      {
        "question": "Which of these would go into global memory?",
        "options": ["A function declared at the top level", "A parameter inside a function", "A variable declared with let inside a block", "A constant declared inside a loop"],
        "correctAnswer": "A function declared at the top level"
      },
      {
        "question": "Which of these would go into local memory?",
        "options": ["A global constant", "A variable declared inside a function", "A function declared at the global scope", "A script tag in the HTML file"],
        "correctAnswer": "A variable declared inside a function"
      }
    ],
    "fillInTheGap": [
      {
        "sentence": "Every time a function is called, a new ____ is created. It contains both a ____ of execution and a block of ____ used to store function-specific data.",
        "gaps": ["execution context", "thread", "memory"],
        "options": ["call stack", "memory", "execution context", "thread", "parameter", "return"]
      },
      {
        "sentence": "The ____ keeps track of which function is currently running. When a function ____, its execution context is ____ from the stack.",
        "gaps": ["call stack", "returns", "removed"],
        "options": ["heap", "removed", "call stack", "enters", "returns", "stored"]
      },
      {
        "sentence": "Replacing hard-coded values with ____ allows functions to be ____, so they can work with different inputs called ____.",
        "gaps": ["parameters", "reused", "arguments"],
        "options": ["arguments", "constants", "reused", "functions", "parameters", "returned"]
      },
      {
        "sentence": "When a function executes a ____ statement, it looks up the result in ____ memory and sends it back to the place where the function was ____.",
        "gaps": ["return", "local", "called"],
        "options": ["called", "defined", "return", "stored", "local", "stacked"]
      }
    ],
    "codeWalkthrough": [
      {
        "codeLines": [
          {
            "code": "const num = 3;",
            "explanation": [
              "Define a constant called num",
              "Assign the number 3 to num"
            ]
          },
          {
            "code": "function multiplyBy2(inputNumber) {",
            "explanation": [
              "Define a function called multiplyBy2",
              "Add a parameter called inputNumber",
              "Store the function in memory",
              "When called, create a new Execution Context"
            ]
          },
          {
            "code": "  const result = inputNumber * 2;",
            "explanation": [
              "Multiply inputNumber by 2",
              "Store the result in a constant called result"
            ]
          },
          {
            "code": "  return result;",
            "explanation": [
              "Return the value stored in result",
              "Remove this Execution Context from the Call Stack"
            ]
          },
          {
            "code": "}",
            "explanation": [
              "End of function definition"
            ]
          },
          {
            "code": "const output = multiplyBy2(num);",
            "explanation": [
              "Declare a constant called output",
              "Call multiplyBy2 with the argument num",
              "multiplyBy2(num) is a command, not stored in memory",
              "Execute the function and assign the returned value to output"
            ]
          },
          {
            "code": "const newOutput = multiplyBy2(10);",
            "explanation": [
              "Declare a constant called newOutput",
              "Call multiplyBy2 with the argument 10",
              "Create a new Execution Context",
              "Multiply 10 by 2 and return the result",
              "Assign the returned value to newOutput"
            ]
          }
        ]
      },
      {
        "title": "copyArrayAndMultiplyBy2",
        "codeLines": [
          {
            "code": "function copyArrayAndMultiplyBy2(array) {",
            "explanation": [
              "Store the function copyArrayAndMultiplyBy2 in global memory with the parameter 'array'"
            ]
          },
          {
            "code": "  const output = [];",
            "explanation": [
              "Define a constant output and assign it an empty array (in local memory)"
            ]
          },
          {
            "code": "  for (let i = 0; i < array.length; i++) {",
            "explanation": [
              "Loop through the array starting from index 0 up to array.length"
            ]
          },
          {
            "code": "    output.push(array[i] * 2);",
            "explanation": [
              "Multiply each element by 2",
              "Push the result into the output array"
            ]
          },
          {
            "code": "  }",
            "explanation": []
          },
          {
            "code": "  return output;",
            "explanation": [
              "Return the output array to the caller"
            ]
          },
          {
            "code": "}",
            "explanation": []
          },
          {
            "code": "const myArray = [1, 2, 3];",
            "explanation": [
              "Define a constant 'myArray' with the values [1,2,3]"
            ]
          },
          {
            "code": "const result = copyArrayAndMultiplyBy2(myArray);",
            "explanation": [
              "Define constant 'result'",
              "Call copyArrayAndMultiplyBy2 and pass in myArray",
              "Create a new execution context for the function call"
            ]
          }
        ]
      },
      {
        "title": "copyArrayAndManipulate",
        "codeLines": [
          {
            "code": "function copyArrayAndManipulate(array, instructions) {",
            "explanation": [
              "Store the function in global memory",
              "Takes two parameters: array and instructions (a function)"
            ]
          },
          {
            "code": "  const output = [];",
            "explanation": [
              "Define a constant output and assign an empty array"
            ]
          },
          {
            "code": "  for (let i = 0; i < array.length; i++) {",
            "explanation": [
              "Loop through the array from index 0 to array.length"
            ]
          },
          {
            "code": "    output.push(instructions(array[i]));",
            "explanation": [
              "For each element in the array, apply the 'instructions' function",
              "Push the result into the output array"
            ]
          },
          {
            "code": "  }",
            "explanation": []
          },
          {
            "code": "  return output;",
            "explanation": [
              "Return the output array"
            ]
          },
          {
            "code": "}",
            "explanation": []
          },
          {
            "code": "function multiplyBy2(input) { return input * 2; }",
            "explanation": [
              "Define multiplyBy2 in global memory",
              "This function takes a number and returns it multiplied by 2"
            ]
          },
          {
            "code": "const result = copyArrayAndManipulate([1, 2, 3], multiplyBy2);",
            "explanation": [
              "Call copyArrayAndManipulate with array [1, 2, 3] and function multiplyBy2",
              "Create a new execution context with local memory:",
              "- array = [1, 2, 3]",
              "- instructions = multiplyBy2",
              "- output = []"
            ]
          }
        ]
      },
      {
        "title": "reduce",
        "codeLines": [
          {
            "code": "function reduce(array, howToCombine, buildingUp) {",
            "explanation": [
              "Store the function reduce in global memory",
              "Takes three parameters:",
              "- array: the array to process",
              "- howToCombine: function that combines elements",
              "- buildingUp: initial value for accumulation"
            ]
          },
          {
            "code": "  for (let i = 0; i < array.length; i++) {",
            "explanation": [
              "Loop through each element of the array from index 0"
            ]
          },
          {
            "code": "    buildingUp = howToCombine(buildingUp, array[i]);",
            "explanation": [
              "Call howToCombine function with current buildingUp value and array element",
              "Update buildingUp with the returned result",
              "This accumulates the result through each iteration"
            ]
          },
          {
            "code": "  }",
            "explanation": []
          },
          {
            "code": "  return buildingUp;",
            "explanation": [
              "Return the final accumulated value"
            ]
          },
          {
            "code": "}",
            "explanation": []
          },
          {
            "code": "function add(a, b) { return a + b; }",
            "explanation": [
              "Define helper function 'add' that takes two parameters and returns their sum"
            ]
          },
          {
            "code": "const numbers = [1, 2, 3, 4];",
            "explanation": [
              "Define constant 'numbers' with array [1, 2, 3, 4]"
            ]
          },
          {
            "code": "const sum = reduce(numbers, add, 0);",
            "explanation": [
              "Call reduce with:",
              "- array: [1, 2, 3, 4]", 
              "- howToCombine: add function",
              "- buildingUp: 0 (starting value)",
              "Create new execution context and process each element:",
              "First iteration: 0 + 1 = 1",
              "Second iteration: 1 + 2 = 3", 
              "Third iteration: 3 + 3 = 6",
              "Fourth iteration: 6 + 4 = 10",
              "Return 10"
            ]
          }
        ]
      },
      {
        "title": "pipe",
        "codeLines": [
          {
            "code": "function pipe(input, ...functions) {",
            "explanation": [
              "Store function 'pipe' in global memory",
              "Takes an input value and any number of functions using rest parameters (...functions)",
              "The ...functions creates an array of all arguments after the first one"
            ]
          },
          {
            "code": "  return functions.reduce((acc, fn) => fn(acc), input);",
            "explanation": [
              "Use the reduce method on the functions array",
              "Start with 'input' as the initial accumulator value",
              "For each function in the array:",
              "- Apply the function to the current accumulator value",
              "- The result becomes the new accumulator",
              "This chains the functions together, passing output of one as input to the next"
            ]
          },
          {
            "code": "}",
            "explanation": []
          },
          {
            "code": "function multiplyBy2(x) { return x * 2; }",
            "explanation": [
              "Define helper function that multiplies input by 2"
            ]
          },
          {
            "code": "function add3(x) { return x + 3; }",
            "explanation": [
              "Define helper function that adds 3 to input"
            ]
          },
          {
            "code": "function divideBy4(x) { return x / 4; }",
            "explanation": [
              "Define helper function that divides input by 4"
            ]
          },
          {
            "code": "const result = pipe(5, multiplyBy2, add3, divideBy4);",
            "explanation": [
              "Call pipe with input 5 and three functions",
              "Create new execution context with:",
              "- input: 5",
              "- functions: [multiplyBy2, add3, divideBy4]",
              "Execute the chain:",
              "Step 1: multiplyBy2(5) = 10",
              "Step 2: add3(10) = 13", 
              "Step 3: divideBy4(13) = 3.25",
              "Return 3.25"
            ]
          }
        ]
      }
    ]
  }
}
